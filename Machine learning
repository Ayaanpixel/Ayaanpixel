# Machine Learning: Housing Price Prediction
This project demonstrates a machine learning workflow for predicting housing prices based on features like room count, crime rate, and proximity to employment centers.

## Features
- Data preprocessing
- Linear Regression Model
- Evaluation with Mean Squared Error and R² Score
- Results Visualization

## Installation
```bash
pip install -r requirements.txt
python src/main.py
---

#### 2. `requirements.txt`
```text
scikit-learn
numpy
pandas
matplotlib
MachineLearningProject/
├── data/
├── models/
├── notebooks/
├── src/
│   ├── main.py
│   ├── preprocess.py
│   ├── train.py
├── visuals/
└── README.md
import pandas as pd
from sklearn.model_selection import train_test_split

def load_data(file_path):
    data = pd.read_csv(file_path)
    return data

def preprocess_data(data, target_column):
    X = data.drop(columns=[target_column])
    y = data[target_column]
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

def train_model(X_train, y_train):
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test):
    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)
    return mse, r2
import os
from preprocess import load_data, preprocess_data
from train import train_model, evaluate_model
import matplotlib.pyplot as plt

DATA_PATH = "data/housing.csv"

def main():
    if not os.path.exists(DATA_PATH):
        print(f"Dataset not found at {DATA_PATH}")
        return

    # Load and preprocess data
    data = load_data(DATA_PATH)
    X_train, X_test, y_train, y_test = preprocess_data(data, target_column="MEDV")

    # Train and evaluate model
    model = train_model(X_train, y_train)
    mse, r2 = evaluate_model(model, X_test, y_test)

    print(f"Model Evaluation:\nMean Squared Error: {mse}\nR² Score: {r2}")

    # Visualization
    predictions = model.predict(X_test)
    plt.scatter(y_test, predictions)
    plt.xlabel("True Values")
    plt.ylabel("Predictions")
    plt.title("True Values vs Predictions")
    plt.savefig("visuals/results.png")
    plt.show()

if __name__ == "__main__":
    main()
